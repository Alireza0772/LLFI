#! /usr/bin/env python3

"""

%(prog)s takes a profiling executable and executes it

Usage: %(prog)s <profiling executable> <the same options that you use to run the excutable before>

       %(prog)s --help(-h): show help information

Prerequisite:
1. You need to be at the parent directory or parent of parent directory of the <profiling executable> to invoke %(prog)s. This is to make it easier for LLFI to track the outputs generated by <profiling executable>
2. (prog)s only checks recursively at the current directory for possible outputs, if your output is not under current directory, you need to store that output by yourself
3. You need to put your input files (if any) under current directory
4. You need to have 'input.yaml' under your current directory, which contains appropriate options for LLFI. 


"""

# This script profiles the program to produce llfi.stat.prof.txt

import sys
import yaml
import os
import time
import subprocess
import shutil

script_path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(os.path.join(script_path, '../config'))
import llvm_paths

profilePath = os.path.join(llvm_paths.LLVM_DST_ROOT, "../llfi/bin/profile")

env=sys.argv[1]
prog = os.path.basename(sys.argv[2])
basename= os.path.splitext(prog)[0]
basedir = os.getcwd()
basedirfolder = basename.split("-")[0]
GUIyaml = basedir+"/"+basedirfolder+"/Multiple-Failure-Modes/input.yaml"
GUIMFMdir = basedir+"/"+basedirfolder+"/"
profiling_exe=""
#print (basedir)
#print (basename)

def howmanymodes():
  global num, env, MFM
  if env =="--CLI":
    f = open("input.yaml", "r")
  elif env== "--GUI":
    f = open(GUIyaml, "r") 

   
  master=list(f)
  m=master.index('          include:\n')
  n=master.index('    regSelMethod: customregselector\n')
  MFM=master[m+1:n]
  num= len(MFM)
  for i in range (0,num):
    if MFM[i]== '\n':
      num=num-1
    
  print (" the number of selected failure modes is:",num)  
#####################################################################################
def callprofiling():

  if(sys.argv[3:]):
    optionlist = sys.argv[3:]
    tmpString = optionlist[0]
    inputsrcFile = basedir+"/"+tmpString
    for x in range (0,len(MFM)-1):
      GUIMFM = GUIMFMdir + "MFM%s" %x
      shutil.copy(inputsrcFile, GUIMFM)
  
  if env =="--CLI":
    for i in range (0,num):
      path= "../MFM%s" %i
      os.chdir(path)
      args_num= len(sys.argv)
      result = subprocess.check_output([profilePath] + sys.argv[1:])
      print ("Current path is:", path)
      print (str(result, encoding='UTF-8'))
  elif env== "--GUI":
    for i in range (0,num):
      path= GUIMFMdir+"MFM%s" %i
      os.chdir(path)
      args_num= len(sys.argv)
      result = subprocess.check_output([profilePath, '--CLI','llfi/%s.exe' %basename] + sys.argv[3:])
      
      print ("Current path is:", path)
      print (str(result, encoding='UTF-8'))
      newpath= '../'
      os.chdir(newpath)
################################################################################
def main(argv):
  howmanymodes()
  callprofiling()
################################################################################

if __name__ == '__main__':
	main(sys.argv[1])
