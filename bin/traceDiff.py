#!/usr/bin/python

#traceDiff.py
#	Author: Sam Coulter
#	This python script is part of the greater LLFI system.
#	This script will examine two tracing output files generated by running a program after
#	the LLFI traceInst pass has been performed.
# 	Exec: traceDiff.py goldenTrace faultyTrace
#	Input: GoldenTrace/faultyTrace - Trace output files after running a traced program
#	Output: Trace Summary into Standard output, redirect with PIPE to save to file


import sys
import subprocess

class diffBlock:
	def __init__(self, header):
		origHeader, newHeader = header.split('c')
		origsplit = origHeader.split(',')
		newsplit = newHeader.split(',')
		self.origStart = origsplit[0]
		if (len(origsplit) > 1):
			self.origEnd =  origsplit[1]
		else:
			self.origEnd = self.origStart
		self.newStart = newsplit[0]
		if (len(newsplit) > 1):
			self.newEnd = newsplit[1]
		else:
			self.newEnd = self.newStart
		self.origLength = int(self.origEnd) - int(self.origStart) + 1
		self.newLength = int(self.newEnd) - int(self.newStart) + 1

		self.origLines = []
		self.newLines = []

	def printdebug(self):
		print self.origStart, "to", self.origEnd, "length", self.origLength
		for line in self.origLines:
			line.printself()
		print self.newStart, "to", self.newEnd, "length", self.newLength
		for line in self.newLines:
			line.printself()

	def printSummary(self):
		status = 0
		if (self.origLength != self.newLength):
			status = "Control Difference"
		else:
			for oline, nline in zip(self.origLines, self.newLines):
				if (oline.ID == nline.ID) and (oline.OPCode == nline.OPCode):
					status = "Data Difference"
				elif (oline.ID != nline.ID) or (oline.OPCode != nline.OPCode):
					status = "Control Difference"
					break
		print "Trace Difference detected at:" 
		print "    Golden Inst Number:", self.origStart, "ID:", self.origLines[0].ID, \
				"OPCode:", self.origLines[0].OPCode, "Value:", self.origLines[0].Value
		print "    Faulty Inst Number:", self.newStart, "ID:", self.newLines[0].ID, \
				"OPCode:", self.newLines[0].OPCode, "Value:", self.newLines[0].Value
		print "    Trace Difference is a", status
		if (self.origLength != self.newLength) or (self.origLength > 1):
			print "    Trace re-aligns after:" 
			print "      Golden Inst Number", self.origEnd, \
					"--- ID:", self.origLines[len(self.origLines)-1].ID
			print "      Faulty Inst Number", self.newEnd, \
					"--- ID:", self.newLines[len(self.newLines)-1].ID
		else:
			print "    Trace re-aligns immediately"


class diffLine:
	def __init__(self, rawLine):
		elements = rawLine.split()
		assert (len(elements) == 7), "DiffLine constructor called incorrectly"
		self.ID = int(elements[2])
		self.OPCode = str(elements[4])
		self.Value = str(elements[6])

	def printself(self):
		print self.ID, self.OPCode, self.Value

def traceDiff(argv):
	if (len(argv) != 3):
		print "Uh Oh, something broke! argv!=3"
		exit(1)
	diffProcess = subprocess.Popen(["diff",argv[1],argv[2]], stdout=subprocess.PIPE)
	(diffOutput,diffErr) = diffProcess.communicate()
	if (diffErr):
		print "diff encountered an error, exiting traceDiff"
		print diffErr
		exit(1)
	else:
		print "diff Succesful on", argv[1],argv[2]
		#print diffOutput

	lines = diffOutput.split("\n")

	for i in range(0, len(lines)-1):
		if (len(lines[i]) != 0) and (lines[i][0] not in ['<','>','-']):
			#print "found a block header"
			#print lines[i]
			block = diffBlock(lines[i])
			i = i + 1
			while ((len(lines[i]) != 0) and (lines[i][0] in ['<','>','-'])):
				if (lines[i][0] == '-'):
					i = i + 1
					continue
				if (lines[i][0] == '<'):
					block.origLines.append(diffLine(lines[i]))
				if (lines[i][0] == '>'):
					block.newLines.append(diffLine(lines[i]))
				i = i + 1
			block.printSummary()

if (__name__ == "__main__"):
	traceDiff(sys.argv)